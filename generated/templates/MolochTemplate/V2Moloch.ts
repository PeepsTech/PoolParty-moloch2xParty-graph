// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CancelProposal extends EthereumEvent {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get applicantAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MakeDeposit extends EthereumEvent {
  get params(): MakeDeposit__Params {
    return new MakeDeposit__Params(this);
  }
}

export class MakeDeposit__Params {
  _event: MakeDeposit;

  constructor(event: MakeDeposit) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tribute(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintedTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get idleAvgCost(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get goalHit(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class ProcessAmendGovernance extends EthereumEvent {
  get params(): ProcessAmendGovernance__Params {
    return new ProcessAmendGovernance__Params(this);
  }
}

export class ProcessAmendGovernance__Params {
  _event: ProcessAmendGovernance;

  constructor(event: ProcessAmendGovernance) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get newToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get newIdle(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get newPartyGoal(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get newDepositRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ProcessGuildKickProposal extends EthereumEvent {
  get params(): ProcessGuildKickProposal__Params {
    return new ProcessGuildKickProposal__Params(this);
  }
}

export class ProcessGuildKickProposal__Params {
  _event: ProcessGuildKickProposal;

  constructor(event: ProcessGuildKickProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessIdleProposal extends EthereumEvent {
  get params(): ProcessIdleProposal__Params {
    return new ProcessIdleProposal__Params(this);
  }
}

export class ProcessIdleProposal__Params {
  _event: ProcessIdleProposal;

  constructor(event: ProcessIdleProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get idleRedemptionAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get depositTokenAmt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProcessProposal extends EthereumEvent {
  get params(): ProcessProposal__Params {
    return new ProcessProposal__Params(this);
  }
}

export class ProcessProposal__Params {
  _event: ProcessProposal;

  constructor(event: ProcessProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Ragequit extends EthereumEvent {
  get params(): Ragequit__Params {
    return new Ragequit__Params(this);
  }
}

export class Ragequit__Params {
  _event: Ragequit;

  constructor(event: Ragequit) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesToBurn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SponsorProposal extends EthereumEvent {
  get params(): SponsorProposal__Params {
    return new SponsorProposal__Params(this);
  }
}

export class SponsorProposal__Params {
  _event: SponsorProposal;

  constructor(event: SponsorProposal) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startingPeriod(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SubmitProposal extends EthereumEvent {
  get params(): SubmitProposal__Params {
    return new SubmitProposal__Params(this);
  }
}

export class SubmitProposal__Params {
  _event: SubmitProposal;

  constructor(event: SubmitProposal) {
    this._event = event;
  }

  get applicant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesRequested(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tributeOffered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get details(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get flags(): Array<boolean> {
    return this._event.parameters[8].value.toBooleanArray();
  }

  get proposalId(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[10].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[11].value.toAddress();
  }
}

export class SubmitVote extends EthereumEvent {
  get params(): SubmitVote__Params {
    return new SubmitVote__Params(this);
  }
}

export class SubmitVote__Params {
  _event: SubmitVote;

  constructor(event: SubmitVote) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get uintVote(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class SummonComplete extends EthereumEvent {
  get params(): SummonComplete__Params {
    return new SummonComplete__Params(this);
  }
}

export class SummonComplete__Params {
  _event: SummonComplete;

  constructor(event: SummonComplete) {
    this._event = event;
  }

  get summoners(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get summoningTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get periodDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get votingPeriodLength(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get gracePeriodLength(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get proposalDepositReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get partyGoal(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get depositRate(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class TokensCollected extends EthereumEvent {
  get params(): TokensCollected__Params {
    return new TokensCollected__Params(this);
  }
}

export class TokensCollected__Params {
  _event: TokensCollected;

  constructor(event: TokensCollected) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToCollect(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateDelegateKey extends EthereumEvent {
  get params(): UpdateDelegateKey__Params {
    return new UpdateDelegateKey__Params(this);
  }
}

export class UpdateDelegateKey__Params {
  _event: UpdateDelegateKey;

  constructor(event: UpdateDelegateKey) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDelegateKey(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends EthereumEvent {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawEarnings extends EthereumEvent {
  get params(): WithdrawEarnings__Params {
    return new WithdrawEarnings__Params(this);
  }
}

export class WithdrawEarnings__Params {
  _event: WithdrawEarnings;

  constructor(event: WithdrawEarnings) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get iToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get earningsToUser(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get depositToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get redeemedTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class V2Moloch__membersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromBoolean(this.value6));
    map.set("value7", EthereumValue.fromBoolean(this.value7));
    return map;
  }
}

export class V2Moloch__proposalsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: BigInt;
  value8: Address;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: Bytes;
  value13: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: BigInt,
    value8: Address,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: Bytes,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromAddress(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromAddress(this.value8));
    map.set("value9", EthereumValue.fromUnsignedBigInt(this.value9));
    map.set("value10", EthereumValue.fromUnsignedBigInt(this.value10));
    map.set("value11", EthereumValue.fromUnsignedBigInt(this.value11));
    map.set("value12", EthereumValue.fromFixedBytes(this.value12));
    map.set("value13", EthereumValue.fromUnsignedBigInt(this.value13));
    return map;
  }
}

export class V2Moloch extends SmartContract {
  static bind(address: Address): V2Moloch {
    return new V2Moloch("V2Moloch", address);
  }

  checkGoal(): i32 {
    let result = super.call("checkGoal", []);

    return result[0].toI32();
  }

  try_checkGoal(): CallResult<i32> {
    let result = super.tryCall("checkGoal", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getUserEarnings(amount: BigInt): BigInt {
    let result = super.call("getUserEarnings", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_getUserEarnings(amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getUserEarnings", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  submitProposal(
    applicant: Address,
    tributeOffered: BigInt,
    sharesRequested: BigInt,
    lootRequested: BigInt,
    paymentRequested: BigInt,
    flagNumber: BigInt,
    tributeToken: Address,
    paymentToken: Address,
    details: Bytes
  ): BigInt {
    let result = super.call("submitProposal", [
      EthereumValue.fromAddress(applicant),
      EthereumValue.fromUnsignedBigInt(tributeOffered),
      EthereumValue.fromUnsignedBigInt(sharesRequested),
      EthereumValue.fromUnsignedBigInt(lootRequested),
      EthereumValue.fromUnsignedBigInt(paymentRequested),
      EthereumValue.fromUnsignedBigInt(flagNumber),
      EthereumValue.fromAddress(tributeToken),
      EthereumValue.fromAddress(paymentToken),
      EthereumValue.fromFixedBytes(details)
    ]);

    return result[0].toBigInt();
  }

  try_submitProposal(
    applicant: Address,
    tributeOffered: BigInt,
    sharesRequested: BigInt,
    lootRequested: BigInt,
    paymentRequested: BigInt,
    flagNumber: BigInt,
    tributeToken: Address,
    paymentToken: Address,
    details: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("submitProposal", [
      EthereumValue.fromAddress(applicant),
      EthereumValue.fromUnsignedBigInt(tributeOffered),
      EthereumValue.fromUnsignedBigInt(sharesRequested),
      EthereumValue.fromUnsignedBigInt(lootRequested),
      EthereumValue.fromUnsignedBigInt(paymentRequested),
      EthereumValue.fromUnsignedBigInt(flagNumber),
      EthereumValue.fromAddress(tributeToken),
      EthereumValue.fromAddress(paymentToken),
      EthereumValue.fromFixedBytes(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  actions(param0: BigInt): Bytes {
    let result = super.call("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_actions(param0: BigInt): CallResult<Bytes> {
    let result = super.tryCall("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  approvedTokens(param0: BigInt): Address {
    let result = super.call("approvedTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_approvedTokens(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("approvedTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  canRagequit(highestIndexYesVote: BigInt): boolean {
    let result = super.call("canRagequit", [
      EthereumValue.fromUnsignedBigInt(highestIndexYesVote)
    ]);

    return result[0].toBoolean();
  }

  try_canRagequit(highestIndexYesVote: BigInt): CallResult<boolean> {
    let result = super.tryCall("canRagequit", [
      EthereumValue.fromUnsignedBigInt(highestIndexYesVote)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  daoFee(): Address {
    let result = super.call("daoFee", []);

    return result[0].toAddress();
  }

  try_daoFee(): CallResult<Address> {
    let result = super.tryCall("daoFee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  depositRate(): BigInt {
    let result = super.call("depositRate", []);

    return result[0].toBigInt();
  }

  try_depositRate(): CallResult<BigInt> {
    let result = super.tryCall("depositRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  depositToken(): Address {
    let result = super.call("depositToken", []);

    return result[0].toAddress();
  }

  try_depositToken(): CallResult<Address> {
    let result = super.tryCall("depositToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ESCROW(): Address {
    let result = super.call("ESCROW", []);

    return result[0].toAddress();
  }

  try_ESCROW(): CallResult<Address> {
    let result = super.tryCall("ESCROW", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getCurrentPeriod(): BigInt {
    let result = super.call("getCurrentPeriod", []);

    return result[0].toBigInt();
  }

  try_getCurrentPeriod(): CallResult<BigInt> {
    let result = super.tryCall("getCurrentPeriod", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getIdleValue(amount: BigInt): BigInt {
    let result = super.call("getIdleValue", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_getIdleValue(amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getIdleValue", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getMemberProposalVote(memberAddress: Address, proposalIndex: BigInt): i32 {
    let result = super.call("getMemberProposalVote", [
      EthereumValue.fromAddress(memberAddress),
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);

    return result[0].toI32();
  }

  try_getMemberProposalVote(
    memberAddress: Address,
    proposalIndex: BigInt
  ): CallResult<i32> {
    let result = super.tryCall("getMemberProposalVote", [
      EthereumValue.fromAddress(memberAddress),
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getProposalFlags(proposalId: BigInt): Array<boolean> {
    let result = super.call("getProposalFlags", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toBooleanArray();
  }

  try_getProposalFlags(proposalId: BigInt): CallResult<Array<boolean>> {
    let result = super.tryCall("getProposalFlags", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBooleanArray());
  }

  getProposalQueueLength(): BigInt {
    let result = super.call("getProposalQueueLength", []);

    return result[0].toBigInt();
  }

  try_getProposalQueueLength(): CallResult<BigInt> {
    let result = super.tryCall("getProposalQueueLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): CallResult<BigInt> {
    let result = super.tryCall("getTokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getUserTokenBalance(user: Address, token: Address): BigInt {
    let result = super.call("getUserTokenBalance", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getUserTokenBalance(user: Address, token: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserTokenBalance", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  goalHit(): i32 {
    let result = super.call("goalHit", []);

    return result[0].toI32();
  }

  try_goalHit(): CallResult<i32> {
    let result = super.tryCall("goalHit", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  gracePeriodLength(): BigInt {
    let result = super.call("gracePeriodLength", []);

    return result[0].toBigInt();
  }

  try_gracePeriodLength(): CallResult<BigInt> {
    let result = super.tryCall("gracePeriodLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  GUILD(): Address {
    let result = super.call("GUILD", []);

    return result[0].toAddress();
  }

  try_GUILD(): CallResult<Address> {
    let result = super.tryCall("GUILD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  hasVotingPeriodExpired(startingPeriod: BigInt): boolean {
    let result = super.call("hasVotingPeriodExpired", [
      EthereumValue.fromUnsignedBigInt(startingPeriod)
    ]);

    return result[0].toBoolean();
  }

  try_hasVotingPeriodExpired(startingPeriod: BigInt): CallResult<boolean> {
    let result = super.tryCall("hasVotingPeriodExpired", [
      EthereumValue.fromUnsignedBigInt(startingPeriod)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  idleAvgCost(): BigInt {
    let result = super.call("idleAvgCost", []);

    return result[0].toBigInt();
  }

  try_idleAvgCost(): CallResult<BigInt> {
    let result = super.tryCall("idleAvgCost", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  idleToken(): Address {
    let result = super.call("idleToken", []);

    return result[0].toAddress();
  }

  try_idleToken(): CallResult<Address> {
    let result = super.tryCall("idleToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  initialized(): boolean {
    let result = super.call("initialized", []);

    return result[0].toBoolean();
  }

  try_initialized(): CallResult<boolean> {
    let result = super.tryCall("initialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  memberList(param0: BigInt): Address {
    let result = super.call("memberList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_memberList(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("memberList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  members(param0: Address): V2Moloch__membersResult {
    let result = super.call("members", [EthereumValue.fromAddress(param0)]);

    return new V2Moloch__membersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean()
    );
  }

  try_members(param0: Address): CallResult<V2Moloch__membersResult> {
    let result = super.tryCall("members", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new V2Moloch__membersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean()
      )
    );
  }

  partyGoal(): BigInt {
    let result = super.call("partyGoal", []);

    return result[0].toBigInt();
  }

  try_partyGoal(): CallResult<BigInt> {
    let result = super.tryCall("partyGoal", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  periodDuration(): BigInt {
    let result = super.call("periodDuration", []);

    return result[0].toBigInt();
  }

  try_periodDuration(): CallResult<BigInt> {
    let result = super.tryCall("periodDuration", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalCount(): BigInt {
    let result = super.call("proposalCount", []);

    return result[0].toBigInt();
  }

  try_proposalCount(): CallResult<BigInt> {
    let result = super.tryCall("proposalCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalDepositReward(): BigInt {
    let result = super.call("proposalDepositReward", []);

    return result[0].toBigInt();
  }

  try_proposalDepositReward(): CallResult<BigInt> {
    let result = super.tryCall("proposalDepositReward", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalQueue(param0: BigInt): BigInt {
    let result = super.call("proposalQueue", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_proposalQueue(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("proposalQueue", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: BigInt): V2Moloch__proposalsResult {
    let result = super.call("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new V2Moloch__proposalsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBytes(),
      result[13].toBigInt()
    );
  }

  try_proposals(param0: BigInt): CallResult<V2Moloch__proposalsResult> {
    let result = super.tryCall("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new V2Moloch__proposalsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBytes(),
        value[13].toBigInt()
      )
    );
  }

  proposedToKick(param0: Address): boolean {
    let result = super.call("proposedToKick", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_proposedToKick(param0: Address): CallResult<boolean> {
    let result = super.tryCall("proposedToKick", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  summoningTime(): BigInt {
    let result = super.call("summoningTime", []);

    return result[0].toBigInt();
  }

  try_summoningTime(): CallResult<BigInt> {
    let result = super.tryCall("summoningTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenWhitelist(param0: Address): boolean {
    let result = super.call("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokenWhitelist(param0: Address): CallResult<boolean> {
    let result = super.tryCall("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  TOTAL(): Address {
    let result = super.call("TOTAL", []);

    return result[0].toAddress();
  }

  try_TOTAL(): CallResult<Address> {
    let result = super.tryCall("TOTAL", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): CallResult<BigInt> {
    let result = super.tryCall("totalDeposits", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalLoot(): BigInt {
    let result = super.call("totalLoot", []);

    return result[0].toBigInt();
  }

  try_totalLoot(): CallResult<BigInt> {
    let result = super.tryCall("totalLoot", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", []);

    return result[0].toBigInt();
  }

  try_totalShares(): CallResult<BigInt> {
    let result = super.tryCall("totalShares", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  userTokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call("userTokenBalances", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_userTokenBalances(param0: Address, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("userTokenBalances", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriodLength(): BigInt {
    let result = super.call("votingPeriodLength", []);

    return result[0].toBigInt();
  }

  try_votingPeriodLength(): CallResult<BigInt> {
    let result = super.tryCall("votingPeriodLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class CancelProposalCall extends EthereumCall {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class CheckGoalCall extends EthereumCall {
  get inputs(): CheckGoalCall__Inputs {
    return new CheckGoalCall__Inputs(this);
  }

  get outputs(): CheckGoalCall__Outputs {
    return new CheckGoalCall__Outputs(this);
  }
}

export class CheckGoalCall__Inputs {
  _call: CheckGoalCall;

  constructor(call: CheckGoalCall) {
    this._call = call;
  }
}

export class CheckGoalCall__Outputs {
  _call: CheckGoalCall;

  constructor(call: CheckGoalCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class CollectTokensCall extends EthereumCall {
  get inputs(): CollectTokensCall__Inputs {
    return new CollectTokensCall__Inputs(this);
  }

  get outputs(): CollectTokensCall__Outputs {
    return new CollectTokensCall__Outputs(this);
  }
}

export class CollectTokensCall__Inputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectTokensCall__Outputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }
}

export class GetUserEarningsCall extends EthereumCall {
  get inputs(): GetUserEarningsCall__Inputs {
    return new GetUserEarningsCall__Inputs(this);
  }

  get outputs(): GetUserEarningsCall__Outputs {
    return new GetUserEarningsCall__Outputs(this);
  }
}

export class GetUserEarningsCall__Inputs {
  _call: GetUserEarningsCall;

  constructor(call: GetUserEarningsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetUserEarningsCall__Outputs {
  _call: GetUserEarningsCall;

  constructor(call: GetUserEarningsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _founders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _approvedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _daoFee(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _votingPeriodLength(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _gracePeriodLength(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _proposalDepositReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _depositRate(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _partyGoal(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class MakeDepositCall extends EthereumCall {
  get inputs(): MakeDepositCall__Inputs {
    return new MakeDepositCall__Inputs(this);
  }

  get outputs(): MakeDepositCall__Outputs {
    return new MakeDepositCall__Outputs(this);
  }
}

export class MakeDepositCall__Inputs {
  _call: MakeDepositCall;

  constructor(call: MakeDepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeDepositCall__Outputs {
  _call: MakeDepositCall;

  constructor(call: MakeDepositCall) {
    this._call = call;
  }
}

export class ProcessAmendGovernanceCall extends EthereumCall {
  get inputs(): ProcessAmendGovernanceCall__Inputs {
    return new ProcessAmendGovernanceCall__Inputs(this);
  }

  get outputs(): ProcessAmendGovernanceCall__Outputs {
    return new ProcessAmendGovernanceCall__Outputs(this);
  }
}

export class ProcessAmendGovernanceCall__Inputs {
  _call: ProcessAmendGovernanceCall;

  constructor(call: ProcessAmendGovernanceCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessAmendGovernanceCall__Outputs {
  _call: ProcessAmendGovernanceCall;

  constructor(call: ProcessAmendGovernanceCall) {
    this._call = call;
  }
}

export class ProcessGuildKickProposalCall extends EthereumCall {
  get inputs(): ProcessGuildKickProposalCall__Inputs {
    return new ProcessGuildKickProposalCall__Inputs(this);
  }

  get outputs(): ProcessGuildKickProposalCall__Outputs {
    return new ProcessGuildKickProposalCall__Outputs(this);
  }
}

export class ProcessGuildKickProposalCall__Inputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessGuildKickProposalCall__Outputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }
}

export class ProcessProposalCall extends EthereumCall {
  get inputs(): ProcessProposalCall__Inputs {
    return new ProcessProposalCall__Inputs(this);
  }

  get outputs(): ProcessProposalCall__Outputs {
    return new ProcessProposalCall__Outputs(this);
  }
}

export class ProcessProposalCall__Inputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessProposalCall__Outputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }
}

export class RagekickCall extends EthereumCall {
  get inputs(): RagekickCall__Inputs {
    return new RagekickCall__Inputs(this);
  }

  get outputs(): RagekickCall__Outputs {
    return new RagekickCall__Outputs(this);
  }
}

export class RagekickCall__Inputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }

  get memberToKick(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RagekickCall__Outputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }
}

export class RagequitCall extends EthereumCall {
  get inputs(): RagequitCall__Inputs {
    return new RagequitCall__Inputs(this);
  }

  get outputs(): RagequitCall__Outputs {
    return new RagequitCall__Outputs(this);
  }
}

export class RagequitCall__Inputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }
}

export class RagequitCall__Outputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }
}

export class SponsorProposalCall extends EthereumCall {
  get inputs(): SponsorProposalCall__Inputs {
    return new SponsorProposalCall__Inputs(this);
  }

  get outputs(): SponsorProposalCall__Outputs {
    return new SponsorProposalCall__Outputs(this);
  }
}

export class SponsorProposalCall__Inputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SponsorProposalCall__Outputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }
}

export class SubmitProposalCall extends EthereumCall {
  get inputs(): SubmitProposalCall__Inputs {
    return new SubmitProposalCall__Inputs(this);
  }

  get outputs(): SubmitProposalCall__Outputs {
    return new SubmitProposalCall__Outputs(this);
  }
}

export class SubmitProposalCall__Inputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tributeOffered(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sharesRequested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get paymentRequested(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get flagNumber(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get paymentToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get details(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class SubmitProposalCall__Outputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitVoteCall extends EthereumCall {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uintVote(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends EthereumCall {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalancesCall extends EthereumCall {
  get inputs(): WithdrawBalancesCall__Inputs {
    return new WithdrawBalancesCall__Inputs(this);
  }

  get outputs(): WithdrawBalancesCall__Outputs {
    return new WithdrawBalancesCall__Outputs(this);
  }
}

export class WithdrawBalancesCall__Inputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get max(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawBalancesCall__Outputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }
}

export class WithdrawEarningsCall extends EthereumCall {
  get inputs(): WithdrawEarningsCall__Inputs {
    return new WithdrawEarningsCall__Inputs(this);
  }

  get outputs(): WithdrawEarningsCall__Outputs {
    return new WithdrawEarningsCall__Outputs(this);
  }
}

export class WithdrawEarningsCall__Inputs {
  _call: WithdrawEarningsCall;

  constructor(call: WithdrawEarningsCall) {
    this._call = call;
  }

  get memberAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawEarningsCall__Outputs {
  _call: WithdrawEarningsCall;

  constructor(call: WithdrawEarningsCall) {
    this._call = call;
  }
}
